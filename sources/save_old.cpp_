// mb_func.cpp ------------------------------
// Copyright 2024 Tomat7 (star0413@gmail.com)
// https://www.bogotobogo.com/cplusplus/C11/1_C11_creating_thread.php
// https://stackoverflow.com/questions/266168/simple-example-of-threading-in-c


/*
  void mb_update_master(int x)
  {
  PLC_c &D = PLCvec[x];
  prev_ts[x] = D.mb.timestamp_try_ms;
  res[x] = D.update_master();
  std::this_thread::yield();
  return;
  }


  int mb_update()
  {
  //  "===== mb_update ====="
  uint64_t i = 0;
  uint64_t nb_plcs = PLCvec.size();
  vector<thread> thr(nb_plcs);
  res.resize((int)nb_plcs);
  prev_ts.resize(nb_plcs);

  logger_set_queue(true);

  for (i = 0; i < nb_plcs; i++)
    thr[i] = thread(mb_update_master, i);

  std::this_thread::sleep_for(10ms);
  printf("mb_update threads STARTED and ready to JOIN.\n");
  std::this_thread::yield();

  for (auto &th : thr) {
    printf(".");
    th.join();
  }

  printf("\n");
  std::this_thread::sleep_for(10ms);
  logger_set_queue(false);
  logger_flush();

  //   for (i = 0; i < nb_plcs; i++)
  //    mb_print_summary((int)i);

  mb_print_summary();
  res.clear();
  prev_ts.clear();

  return 0;
  }

  int mb_read()
  {
  printf("\n===== mb_read =====\n");
  int ret = 0;

  for (auto &D : PLCvec) {
    uint64_t old = D.mb.timestamp_try_ms;
    ret = D.read_master();
    printf("%-7s_dT: %4ld ret: %2d err: %d cn: %d rd: %d wr: %d rc: %2d\n",
           D.dev_name, D.mb.timestamp_try_ms - old, ret, D.mb.errors,
           D.mb.errors_cn, D.mb.errors_rd, D.mb.errors_wr, D.get_rc());
  }
  return 0;
  }

  int mb_write()
  {
  printf("\n===== mb_write =====\n");

  for (auto &D : PLCvec) {
    D.write_master();
    //    tt.sleep_ms(10);
  }

  return 0;
  }
*/


// uint16_t opc_update_uint16(string name, regdata_t* rd)
/*
  uint16_t opc_update_uint16(string name, Reg_c* R)
  {
  // printf("\n===== OPC_update_uint16 =====\n");
  regdata_t* rd = R->ptr_data_plc;
  uint16_t val_ui16 = R->get_value<uint16_t>(); // rd->rvalue;
  int16_t val_i16 = (int16_t)rd->rvalue;
  float val_fl = (int16_t)rd->rvalue * (float)0.01;
  bool isOK = (rd->rerrors == 0);
  int rtype = rd->rtype;

  string n = name; //(R->ptr_reg)->str_opcname;
  uint16_t val_get = 0;

  OPCs.updateVar(Cfg.opc.ErrFolder + n + Cfg.opc.ErrSuffix, rd->rerrors, true);

  // TODO: full recode with new TYPE_*
  if (rtype == 2)
    val_get = CAST(uint16_t)(100 * OPCs.updateVar(n, val_fl, isOK));
  else if (rtype == 1)
    val_get = CAST(uint16_t)(OPCs.updateVar(n, val_i16, isOK));
  else if (rtype == 0)
    val_get = CAST(uint16_t)(OPCs.updateVar(n, val_ui16, isOK));

  return val_get;
  }
*/


  
/*
  template<typename T>
  uint16_t opc_update_var(string s, T Value_set, bool isOK)
  {
  T Value_get = Value_set;
  Value_get = OPCs.getVar(s, Value_get);
  if (OPCs.getType(s) == UA_TYPES_FLOAT) {
    Value_get = (uint16_t)(Value_get * 100);
    Value_set = Value_set * (T)0.01;
  }
  OPCs.setVar(s, Value_set, isOK);
  return (uint16_t)Value_get;
  }
*/

/*     string parent = name;
    string folder = rm.ptr_reg->str_title;
    size_t z = parent.find(".");
    parent.erase(z);
*/
// n = PLC_folder + parent + "/" + name;  // full - /PLC/Kub/Kub.Temp1
/* if (folder != "")
  n += "/" + folder;    // = /PLC/
  if (parent != "")
  n += + "/" + parent;  // = /PLC/Kub

  n += "/" + name;        // = /PLC/Kub/Kub.Temp1
*/

/*   string parent = name;
  string folder = rm.ptr_reg->str_title;
  size_t z = parent.find(".");
  parent.erase(z);
*/
// string n = PLC_folder + parent + "/" + name;

// eof
